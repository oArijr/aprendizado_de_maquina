# -*- coding: utf-8 -*-
"""TRABALHO 3 - PARTE 2: Algoritmo Árvores de Decisão.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P7VwNUgFw7GtafoFWR0mVoAsqIc9F__p

# PARTE 2: Algoritmo Árvores de Decisão

Nesta segunda parte do Trabalho você irá aplicar os algoritmos de Árvore de Decisão e de Floresta Aleatória na base de dados de risco de crédito discutida em aula. Para isso você deve primeiramente importar as bibliotecas necessárias.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.preprocessing import LabelEncoder

"""# 1 - Importação dos dados Pré-Processados

a) importe o arquivo salvo como 'risco_credito.pkl'
"""
import pickle
with open('risco_credito.pkl', 'rb') as f:
  X_risco_credito, y_risco_credito = pickle.load(f)

atributos = ["História do Crédito", "Dívida", "Garantias", "Renda Anual"]
X_risco_credito = pd.DataFrame(X_risco_credito, columns=atributos)

x_encoded = X_risco_credito.copy()
label_encoders = {}

for col in x_encoded.columns:
    le = LabelEncoder()
    x_encoded[col] = le.fit_transform(x_encoded[col])
    label_encoders[col] = le

le_y = LabelEncoder()
y_encoded = le_y.fit_transform(y_risco_credito)

print("_" * 80)
"""# 2 - Algoritmo de Árvore de Decisão"""

""" a) importar da biblioteca sklearn o pacote DecisionTreeClassifier"""
from sklearn.tree import DecisionTreeClassifier
"""
 b) Calcule a árvore de decisão, utilizando como critério a entropia.
 Coloque como nome da variável: arvore_risco_credito
"""
arvore_risco_credito = DecisionTreeClassifier(criterion='entropy')
arvore_risco_credito.fit(x_encoded, y_encoded)

"""c) Utilize o feature_importances_ para retornar a importância de cada atributo. Qual possui o maior ganho de informação?"""
feature_importances = arvore_risco_credito.feature_importances_

for nome, importancia in zip(arvore_risco_credito.feature_names_in_, feature_importances):
    print(f"{nome}: {importancia}")

# R: O atributo com maior ganho de informação é a Renda Atual.

"""
d) Gere uma visualização da sua árvore de decisão utilizando o pacote tree da biblioteca do sklearn.
OBS: Adicione cores, nomes para os atributos e para as classes.
"""
from sklearn import tree

plt.figure(figsize=(20, 20))
tree.plot_tree(
    arvore_risco_credito,
    feature_names=arvore_risco_credito.feature_names_in_,
    class_names=le_y.classes_,
    filled=True,
    proportion=True,
    fontsize=12
)
plt.show()

"""
e) FAZER A PREVISÃO

Utilize .predict para fazer a previsão realizada no exemplo em sala.

i. história boa, dívida alta, garantia nenhuma, renda > 35

ii. história ruim, dívida alta, garantia adequada, renda < 15
Verifique nos slides se seu resultado está correto!
"""

exemplo_1 = [
    label_encoders['História do Crédito'].transform(['boa'])[0],
    label_encoders['Dívida'].transform(['alta'])[0],
    label_encoders['Garantias'].transform(['nenhuma'])[0],
    label_encoders['Renda Anual'].transform(['acima_35'])[0]
]

exemplo_2 = [
    label_encoders['História do Crédito'].transform(['ruim'])[0],
    label_encoders['Dívida'].transform(['alta'])[0],
    label_encoders['Garantias'].transform(['adequada'])[0],
    label_encoders['Renda Anual'].transform(['0_15'])[0]
]

exemplos = [exemplo_1, exemplo_2]

previsoes = le_y.inverse_transform(arvore_risco_credito.predict(exemplos))

for i, previsao in enumerate(previsoes, start=1):
    print(f"Exemplo {i}: {previsao}")

# Resultado do slide: Exemplo 1 = Baixo, Exemplo 2 = Alto

